//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Passwords = newPasswordsTable("public", "passwords", "")

type passwordsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Userid    postgres.ColumnInteger
	Password  postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type PasswordsTable struct {
	passwordsTable

	EXCLUDED passwordsTable
}

// AS creates new PasswordsTable with assigned alias
func (a PasswordsTable) AS(alias string) *PasswordsTable {
	return newPasswordsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PasswordsTable with assigned schema name
func (a PasswordsTable) FromSchema(schemaName string) *PasswordsTable {
	return newPasswordsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PasswordsTable with assigned table prefix
func (a PasswordsTable) WithPrefix(prefix string) *PasswordsTable {
	return newPasswordsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PasswordsTable with assigned table suffix
func (a PasswordsTable) WithSuffix(suffix string) *PasswordsTable {
	return newPasswordsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPasswordsTable(schemaName, tableName, alias string) *PasswordsTable {
	return &PasswordsTable{
		passwordsTable: newPasswordsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newPasswordsTableImpl("", "excluded", ""),
	}
}

func newPasswordsTableImpl(schemaName, tableName, alias string) passwordsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UseridColumn    = postgres.IntegerColumn("userid")
		PasswordColumn  = postgres.StringColumn("password")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UseridColumn, PasswordColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UseridColumn, PasswordColumn, CreatedAtColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return passwordsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Userid:    UseridColumn,
		Password:  PasswordColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
